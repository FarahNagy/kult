import { __assign } from "tslib";
import React from 'react';
import { scrollToItem } from './scrollToItem';
import './HorizontalScroll.styles.css';
var HorizontalScrollComponent = function (_a, ref) {
    var _b = _a.offset, offset = _b === void 0 ? 0 : _b, _c = _a.gap, gap = _c === void 0 ? 0 : _c, _d = _a.scrollToItemIndex, scrollToItemIndex = _d === void 0 ? 0 : _d, activeDataAttribute = _a.activeDataAttribute, _e = _a.layout, layout = _e === void 0 ? 'SCROLL' : _e, children = _a.children;
    var wrapperRef = React.useRef(null);
    React.useEffect(function () {
        if (scrollToItemIndex > 0) {
            scrollToItem(scrollToItemIndex, wrapperRef, activeDataAttribute);
        }
    }, [scrollToItemIndex, wrapperRef, activeDataAttribute]);
    React.useImperativeHandle(ref, function () { return ({
        scrollToIndex: function (index) {
            scrollToItem(index, wrapperRef, activeDataAttribute);
        },
        hasScrollContent: function () {
            return (wrapperRef === null || wrapperRef === void 0 ? void 0 : wrapperRef.current) ? wrapperRef.current.clientWidth < wrapperRef.current.scrollWidth : false;
        }
    }); });
    return (React.createElement("section", { ref: wrapperRef, className: layout === 'SCROLL' ? 'horizontalScrollWrapper' : 'floatWrapper', style: { gap: gap, padding: "0 ".concat(offset), scrollPaddingInline: offset } }, React.Children.map(children, function (child, index) {
        if (React.isValidElement(child)) {
            var props = __assign({}, child.props);
            if (activeDataAttribute !== undefined) {
                props[activeDataAttribute] = "".concat(index === 0);
            }
            return React.cloneElement(child, props);
        }
        return null;
    })));
};
export default React.forwardRef(HorizontalScrollComponent);
//# sourceMappingURL=HorizontalScroll.js.map