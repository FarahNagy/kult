{"ast":null,"code":"/**\n * React Router DOM v6.14.2\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_mapRouteProperties, Router, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, UNSAFE_DataRouterStateContext, useNavigate, createPath, UNSAFE_useRouteId, UNSAFE_RouteContext, useMatches, useNavigation, unstable_useBlocker, UNSAFE_DataRouterContext } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, RouterProvider, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, UNSAFE_useRouteId, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, renderMatches, resolvePath, unstable_useBlocker, useActionData, useAsyncError, useAsyncValue, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { stripBasename, UNSAFE_warning, createRouter, createBrowserHistory, createHashHistory, UNSAFE_invariant, joinPaths } from '@remix-run/router';\nimport { ErrorResponse } from '@remix-run/router';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && (\n  // Ignore everything but left clicks\n  !target || target === \"_self\") &&\n  // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n  return searchParams;\n}\n// One-time check for submitter support\nlet _formDataSupportsSubmitter = null;\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(document.createElement(\"form\"),\n      // @ts-expect-error if FormData supports the submitter parameter, this will throw\n      0);\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\nconst supportedFormEncTypes = new Set([\"application/x-www-form-urlencoded\", \"multipart/form-data\", \"text/plain\"]);\nfunction getFormEncType(encType) {\n  if (encType != null && !supportedFormEncTypes.has(encType)) {\n    process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"\\\"\" + encType + \"\\\" is not a valid `encType` for `<Form>`/`<fetcher.Form>` \" + (\"and will default to \\\"\" + defaultEncType + \"\\\"\")) : void 0;\n    return null;\n  }\n  return encType;\n}\nfunction getFormSubmissionInfo(target, basename) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n  let body;\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n    formData = new FormData(target);\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    }\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"formenctype\")) || getFormEncType(form.getAttribute(\"enctype\")) || defaultEncType;\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let {\n        name,\n        type,\n        value\n      } = target;\n      if (type === \"image\") {\n        let prefix = name ? name + \".\" : \"\";\n        formData.append(prefix + \"x\", \"0\");\n        formData.append(prefix + \"y\", \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n  return {\n    action,\n    method: method.toLowerCase(),\n    encType,\n    formData,\n    body\n  };\n}\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\"],\n  _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"children\"],\n  _excluded3 = [\"reloadDocument\", \"replace\", \"state\", \"method\", \"action\", \"onSubmit\", \"submit\", \"relative\", \"preventScrollReset\"];\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: _extends({}, opts == null ? void 0 : opts.future, {\n      v7_prependBasename: true\n    }),\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    mapRouteProperties: UNSAFE_mapRouteProperties\n  }).initialize();\n}\nfunction parseHydrationData() {\n  var _window;\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n  return state;\n}\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nfunction BrowserRouter(_ref) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nfunction HashRouter(_ref2) {\n  let {\n    basename,\n    children,\n    future,\n    window\n  } = _ref2;\n  let historyRef = React.useRef();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    future,\n    history\n  } = _ref3;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  let {\n    v7_startTransition\n  } = future || {};\n  let setState = React.useCallback(newState => {\n    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);\n  }, [setStateImpl, v7_startTransition]);\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware <a>.\n */\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref4, ref) {\n  let {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset\n    } = _ref4,\n    rest = _objectWithoutPropertiesLoose(_ref4, _excluded);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  // Rendered into <a href> for absolute URLs\n  let absoluteHref;\n  let isExternal = false;\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to;\n    // Only check for external origins client-side\n    if (isBrowser) {\n      try {\n        let currentUrl = new URL(window.location.href);\n        let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n        let path = stripBasename(targetUrl.pathname, basename);\n        if (targetUrl.origin === currentUrl.origin && path != null) {\n          // Strip the protocol/origin/basename for same-origin absolute URLs\n          to = path + targetUrl.search + targetUrl.hash;\n        } else {\n          isExternal = true;\n        }\n      } catch (e) {\n        // We can't do external URL detection without a valid URL\n        process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(false, \"<Link to=\\\"\" + to + \"\\\"> contains an invalid URL which will probably break \" + \"when clicked - please update to a valid URL path.\") : void 0;\n      }\n    }\n  }\n  // Rendered into <a href> for relative URLs\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative\n  });\n  function handleClick(event) {\n    if (onClick) onClick(event);\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n  return /*#__PURE__*/(\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref5, ref) {\n  let {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children\n    } = _ref5,\n    rest = _objectWithoutPropertiesLoose(_ref5, _excluded2);\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator\n  } = React.useContext(UNSAFE_NavigationContext);\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp({\n      isActive,\n      isPending\n    });\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null].filter(Boolean).join(\" \");\n  }\n  let style = typeof styleProp === \"function\" ? styleProp({\n    isActive,\n    isPending\n  }) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to\n  }), typeof children === \"function\" ? children({\n    isActive,\n    isPending\n  }) : children);\n});\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nconst Form = /*#__PURE__*/React.forwardRef((props, ref) => {\n  let submit = useSubmit();\n  return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n    submit: submit,\n    ref: ref\n  }));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\nconst FormImpl = /*#__PURE__*/React.forwardRef((_ref6, forwardedRef) => {\n  let {\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      submit,\n      relative,\n      preventScrollReset\n    } = _ref6,\n    props = _objectWithoutPropertiesLoose(_ref6, _excluded3);\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let formAction = useFormAction(action, {\n    relative\n  });\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      method: submitMethod,\n      replace,\n      state,\n      relative,\n      preventScrollReset\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\nif (process.env.NODE_ENV !== \"production\") {\n  FormImpl.displayName = \"FormImpl\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nfunction ScrollRestoration(_ref7) {\n  let {\n    getKey,\n    storageKey\n  } = _ref7;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\nvar DataRouterHook;\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmit\"] = \"useSubmit\";\n  DataRouterHook[\"UseSubmitFetcher\"] = \"useSubmitFetcher\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n})(DataRouterHook || (DataRouterHook = {}));\nvar DataRouterStateHook;\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault();\n      // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() =>\n  // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n  }\n}\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nfunction useSubmit() {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let currentRouteId = UNSAFE_useRouteId();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    router.navigate(options.action || action, {\n      preventScrollReset: options.preventScrollReset,\n      formData,\n      body,\n      formMethod: options.method || method,\n      formEncType: options.encType || encType,\n      replace: options.replace,\n      state: options.state,\n      fromRouteId: currentRouteId\n    });\n  }, [router, basename, currentRouteId]);\n}\n/**\n * Returns the implementation for fetcher.submit\n */\nfunction useSubmitFetcher(fetcherKey, fetcherRouteId) {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmitFetcher);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    validateClientSideSubmission();\n    let {\n      action,\n      method,\n      encType,\n      formData,\n      body\n    } = getFormSubmissionInfo(target, basename);\n    !(fetcherRouteId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for useFetcher()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, fetcherRouteId, options.action || action, {\n      preventScrollReset: options.preventScrollReset,\n      formData,\n      body,\n      formMethod: options.method || method,\n      formEncType: options.encType || encType\n    });\n  }, [router, basename, fetcherKey, fetcherRouteId]);\n}\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  }));\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? \"?\" + params.toString() : \"\";\n    }\n  }\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  }\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\nfunction createFetcherForm(fetcherKey, routeId) {\n  let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n    let submit = useSubmitFetcher(fetcherKey, routeId);\n    return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n      ref: ref,\n      submit: submit\n    }));\n  });\n  if (process.env.NODE_ENV !== \"production\") {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\nlet fetcherId = 0;\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nfunction useFetcher() {\n  var _route$matches;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let route = React.useContext(UNSAFE_RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.Form()\") : UNSAFE_invariant(false) : void 0;\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => href => {\n    !router ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No router available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitFetcher(fetcherKey, routeId);\n  let fetcher = router.getFetcher(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form,\n    submit,\n    load\n  }, fetcher), [fetcher, Form, submit, load]);\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(\"No router available to clean up from useFetcher()\");\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration(_temp3) {\n  let {\n    getKey,\n    storageKey\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n  // Save positions on pagehide\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n    sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches]));\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename = getKey && basename !== \"/\" ? (location, matches) => getKey(\n      // Strip the basename to match useLocation()\n      _extends({}, location, {\n        pathname: stripBasename(location.pathname, basename) || location.pathname\n      }), matches) : getKey;\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt(_ref8) {\n  let {\n    when,\n    message\n  } = _ref8;\n  let blocker = unstable_useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n//#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, ScrollRestoration, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit };","map":{"version":3,"names":["defaultMethod","defaultEncType","isHtmlElement","object","tagName","isButtonElement","toLowerCase","isFormElement","isInputElement","isModifiedEvent","event","metaKey","altKey","ctrlKey","shiftKey","shouldProcessLinkClick","target","button","createSearchParams","init","URLSearchParams","Array","isArray","Object","keys","reduce","memo","key","value","concat","map","v","getSearchParamsForLocation","locationSearch","defaultSearchParams","searchParams","has","getAll","forEach","append","_formDataSupportsSubmitter","isFormDataSubmitterSupported","FormData","document","createElement","e","supportedFormEncTypes","Set","getFormEncType","encType","process","env","NODE_ENV","UNSAFE_warning","getFormSubmissionInfo","method","basename","action","formData","body","attr","getAttribute","stripBasename","type","form","Error","name","prefix","undefined","_excluded3","createBrowserRouter","createRouter","routes","opts","future","_extends","v7_prependBasename","history","createBrowserHistory","window","hydrationData","parseHydrationData","mapRouteProperties","UNSAFE_mapRouteProperties","initialize","createHashRouter","createHashHistory","_window","state","__staticRouterHydrationData","errors","deserializeErrors","entries","serialized","val","__type","ErrorResponse","status","statusText","data","internal","__subType","ErrorConstructor","error","message","stack","START_TRANSITION","startTransitionImpl","React","BrowserRouter","_ref","children","historyRef","useRef","current","v5Compat","setStateImpl","useState","location","v7_startTransition","setState","useCallback","newState","useLayoutEffect","listen","Router","navigationType","navigator","HashRouter","_ref2","HistoryRouter","_ref3","displayName","isBrowser","ABSOLUTE_URL_REGEX","Link","forwardRef","LinkWithRef","_ref4","ref","onClick","relative","reloadDocument","replace","to","preventScrollReset","rest","_objectWithoutPropertiesLoose","_excluded","useContext","UNSAFE_NavigationContext","absoluteHref","isExternal","test","currentUrl","URL","href","targetUrl","startsWith","protocol","path","pathname","origin","search","hash","useHref","internalOnClick","useLinkClickHandler","handleClick","defaultPrevented","NavLink","NavLinkWithRef","_ref5","ariaCurrentProp","caseSensitive","className","classNameProp","end","style","styleProp","_excluded2","useResolvedPath","useLocation","routerState","UNSAFE_DataRouterStateContext","toPathname","encodeLocation","locationPathname","nextLocationPathname","navigation","isActive","charAt","length","isPending","ariaCurrent","filter","Boolean","join","Form","props","submit","useSubmit","FormImpl","_ref6","forwardedRef","onSubmit","formMethod","formAction","useFormAction","submitHandler","preventDefault","submitter","nativeEvent","submitMethod","currentTarget","ScrollRestoration","_ref7","getKey","storageKey","DataRouterHook","DataRouterStateHook","getDataRouterConsoleError","hookName","useDataRouterContext","ctx","UNSAFE_DataRouterContext","UNSAFE_invariant","useDataRouterState","_temp","replaceProp","navigate","useNavigate","createPath","useSearchParams","defaultInit","defaultSearchParamsRef","hasSetSearchParamsRef","useMemo","setSearchParams","nextInit","navigateOptions","newSearchParams","validateClientSideSubmission","router","UseSubmit","currentRouteId","UNSAFE_useRouteId","options","formEncType","fromRouteId","useSubmitFetcher","fetcherKey","fetcherRouteId","UseSubmitFetcher","fetch","_temp2","routeContext","UNSAFE_RouteContext","match","matches","slice","route","index","params","delete","toString","joinPaths","createFetcherForm","FetcherForm","routeId","fetcherId","useFetcher","_route$matches","UseFetcher","id","String","load","fetcher","getFetcher","fetcherWithComponents","useEffect","console","warn","deleteFetcher","useFetchers","UseFetchers","fetchers","values","SCROLL_RESTORATION_STORAGE_KEY","savedScrollPositions","useScrollRestoration","_temp3","UseScrollRestoration","restoreScrollPosition","useMatches","useNavigation","scrollRestoration","usePageHide","scrollY","sessionStorage","setItem","JSON","stringify","sessionPositions","getItem","parse","getKeyWithoutBasename","disableScrollRestoration","enableScrollRestoration","scrollTo","el","getElementById","decodeURIComponent","scrollIntoView","useBeforeUnload","callback","capture","addEventListener","removeEventListener","usePrompt","_ref8","when","blocker","unstable_useBlocker","reset","proceed","confirm","setTimeout"],"sources":["C:\\Users\\dell\\Desktop\\Kult Website\\kult-website\\node_modules\\react-router-dom\\dom.ts","C:\\Users\\dell\\Desktop\\Kult Website\\kult-website\\node_modules\\react-router-dom\\index.tsx"],"sourcesContent":["import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename, UNSAFE_warning as warning } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\nexport type SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | JsonValue\n  | null;\n\n// One-time check for submitter support\nlet _formDataSupportsSubmitter: boolean | null = null;\n\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(\n        document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0\n      );\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The encoding used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n}\n\nconst supportedFormEncTypes: Set<FormEncType> = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\",\n]);\n\nfunction getFormEncType(encType: string | null) {\n  if (encType != null && !supportedFormEncTypes.has(encType as FormEncType)) {\n    warning(\n      false,\n      `\"${encType}\" is not a valid \\`encType\\` for \\`<Form>\\`/\\`<fetcher.Form>\\` ` +\n        `and will default to \"${defaultEncType}\"`\n    );\n\n    return null;\n  }\n  return encType;\n}\n\nexport function getFormSubmissionInfo(\n  target: SubmitTarget,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData | undefined;\n  body: any;\n} {\n  let method: string;\n  let action: string | null;\n  let encType: string;\n  let formData: FormData | undefined;\n  let body: any;\n\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n\n    formData = new FormData(target);\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n\n    method =\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      getFormEncType(target.getAttribute(\"formenctype\")) ||\n      getFormEncType(form.getAttribute(\"enctype\")) ||\n      defaultEncType;\n\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let { name, type, value } = target;\n      if (type === \"image\") {\n        let prefix = name ? `${name}.` : \"\";\n        formData.append(`${prefix}x`, \"0\");\n        formData.append(`${prefix}y`, \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData, body };\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  FutureConfig,\n  Location,\n  NavigateOptions,\n  NavigationType,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  unstable_useBlocker as useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig as RouterFutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  ErrorResponse,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n  SubmitTarget,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  unstable_useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<RouterFutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  future,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({\n  basename,\n  children,\n  future,\n  window,\n}: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({\n  basename,\n  children,\n  future,\n  history,\n}: HistoryRouterProps) {\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FetcherFormProps\n  extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * `<form encType>` - enhancing beyond the normal string type and limiting\n   * to the built-in browser supported values\n   */\n  encType?:\n    | \"application/x-www-form-urlencoded\"\n    | \"multipart/form-data\"\n    | \"text/plain\";\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\nexport interface FormProps extends FetcherFormProps {\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    let submit = useSubmit();\n    return <FormImpl {...props} submit={submit} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  submit: SubmitFunction | FetcherSubmitFunction;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      submit,\n      relative,\n      preventScrollReset,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        state,\n        relative,\n        preventScrollReset,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmit = \"useSubmit\",\n  UseSubmitFetcher = \"useSubmitFetcher\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\nexport type SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Submits a fetcher `<form>` to the server without reloading the page.\n */\nexport interface FetcherSubmitFunction {\n  (\n    target: SubmitTarget,\n    // Fetchers cannot replace or set state because they are not navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"state\">\n  ): void;\n}\n\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\n      \"You are calling submit during the server render. \" +\n        \"Try calling submit within a `useEffect` or callback instead.\"\n    );\n  }\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback<SubmitFunction>(\n    (target, options = {}) => {\n      validateClientSideSubmission();\n\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n\n      router.navigate(options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || (method as HTMLFormMethod),\n        formEncType: options.encType || (encType as FormEncType),\n        replace: options.replace,\n        state: options.state,\n        fromRouteId: currentRouteId,\n      });\n    },\n    [router, basename, currentRouteId]\n  );\n}\n\n/**\n * Returns the implementation for fetcher.submit\n */\nfunction useSubmitFetcher(\n  fetcherKey: string,\n  fetcherRouteId: string\n): FetcherSubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitFetcher);\n  let { basename } = React.useContext(NavigationContext);\n\n  return React.useCallback<FetcherSubmitFunction>(\n    (target, options = {}) => {\n      validateClientSideSubmission();\n\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n\n      invariant(\n        fetcherRouteId != null,\n        \"No routeId available for useFetcher()\"\n      );\n      router.fetch(fetcherKey, fetcherRouteId, options.action || action, {\n        preventScrollReset: options.preventScrollReset,\n        formData,\n        body,\n        formMethod: options.method || (method as HTMLFormMethod),\n        formEncType: options.encType || (encType as FormEncType),\n      });\n    },\n    [router, basename, fetcherKey, fetcherRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FetcherFormProps>(\n    (props, ref) => {\n      let submit = useSubmitFetcher(fetcherKey, routeId);\n      return <FormImpl {...props} ref={ref} submit={submit} />;\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: FetcherSubmitFunction;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitFetcher(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No router available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let { basename } = React.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename: GetScrollRestorationKeyFunction | undefined =\n        getKey && basename !== \"/\"\n          ? (location, matches) =>\n              getKey(\n                // Strip the basename to match useLocation()\n                {\n                  ...location,\n                  pathname:\n                    stripBasename(location.pathname, basename) ||\n                    location.pathname,\n                },\n                matches\n              )\n          : getKey;\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKeyWithoutBasename\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(\n          decodeURIComponent(location.hash.slice(1))\n        );\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({ when, message }: { when: boolean; message: string }) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n//#endregion\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}